<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		 http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd " >
		 
		 
	<description>定义业务层和集成层对象，包括Service、DAO、JNDI资源</description>
	
	<!-- 向Spring容器注册
		AutowiredAnnotationBeanPostProcessor(@Autowired)、 
		CommonAnnotationBeanPostProcessor(@Resource 、@PostConstruct、@PreDestroy)、
		PersistenceAnnotationBeanPostProcessor(@PersistenceContext)、
		RequiredAnnotationBeanPostProcessor(@Required)
	注册这4个 BeanPostProcessor的作用，就是为了你的系统能够识别相应的注解。
	但是	<context:component-scan base-package="XX.XX"/>配置项其实也包含了自动注入上述processor的功能，
	因此当使用 <context:component-scan/>后，就可以将 <context:annotation-config/> 移除了。-->
	<!-- <context:annotation-config proxy-target-class="true"/> -->
	
	<!--扫描@Component、@Controller、@Service和@Repository -->
	<context:component-scan base-package="com.dhm">
		 <context:exclude-filter type="regex" expression=".*\.web\..*" />
	</context:component-scan>
	
    <!-- 声明式事务相关配置-->
    <tx:annotation-driven transaction-manager="txManager"/>
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <!-- 编程式事务相关配置-->
    <bean id="txTemplate" 
        class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="txManager" />
    </bean>
    
    <!-- oracle -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    	<property name="url">
    		<value>jdbc:oracle:thin:@localhost:1521:orcl</value>
    	</property>
    	<property name="username">
    		<value>sysman</value>
    	</property>
    	<property name="password">
    		<value>Oracle123</value>
    	</property>
    	<property name="driverClassName">
    		<value>oracle.jdbc.xa.client.OracleXADataSource</value>
    	</property>
    </bean>
    
    <!-- postgresql -->
    <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" lazy-init="true">
        <property name="url">
            <value>jdbc:postgresql://10.20.131.182:7482/yxdcbp</value>
        </property>
        <property name="username">
            <value>yxdcbpdata</value>
        </property>
        <property name="password">
            <value>lAQpi_78</value>
        </property>
        <property name="driverClassName">
            <value>org.postgresql.Driver</value>
        </property>
    </bean> -->
    
    <!-- mysql -->
     <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" lazy-init="true">
        <property name="url">
            <value>jdbc:mysql://192.168.0.111:3306/test</value>
        </property>
        <property name="username">
            <value>root</value>
        </property>
        <property name="password">
            <value>root</value>
        </property>
        <property name="driverClassName">
            <value>com.mysql.jdbc.Driver</value>
        </property>
    </bean>-->
    
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
    	<property name="configLocation">
    		<value>classpath:sqlmap-config.xml</value>
    	</property>
    	<property name="dataSource" ref="dataSource"/>
    </bean>
    
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<description>可以引用CLASSPATH中springProject-context.properties中定义的变量</description>
			<list>
				<value>classpath:springProject-context.properties</value>
			</list>
		</property>
	</bean>
	
    <util:map id="redisConfig">
    	<description>redis配置参数</description>
    	<entry key="redisHost">
    		<value>${redis.host}</value>
    	</entry>
    	<entry key="redisPort">
    		<value>${redis.port}</value>
    	</entry>
    	<entry key="redisPwd">
    		<value>${redis.pwd}</value>
    	</entry>
    	<entry key="redisMaxActive">
    		<value>${redis.maxactive}</value>
    	</entry>
    	<entry key="redisMaxIdle">
    		<value>${redis.maxidle}</value>
    	</entry>
    	<entry key="redisMaxWait">
    		<value>${redis.maxwait}</value>
    	</entry>
    	<entry key="redisTestOnBorrow">
    		<value>${redis.testonborrow}</value>
    	</entry>
    	<entry key="redisTestOnReturn">
    		<value>${redis.testonreturn}</value>
    	</entry>
    </util:map>
    
    <bean id="redisConfiguration" class="com.dhm.common.redis.RedisConfiguration">
		<description>redis配置参数</description>
		<property name="host" value="${redis.host}"/>
		<property name="port" value="${redis.port}"/>
		<property name="pwd" value="${redis.pwd}"/>
		<property name="maxActive" value="${redis.maxactive}"/>
		<property name="maxIdle" value="${redis.maxidle}"/>
		<property name="maxWait" value="${redis.maxwait}"/>
		<property name="testOnBorrow" value="${redis.testonborrow}"/>
		<property name="testOnReturn" value="${redis.testonreturn}"/>
	</bean>
	
	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 调度工厂 -->
	<bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		 <property name="triggers">
			<list>
				<ref bean="printHelloTrigger"/>
				<ref bean="printHelloTrigger1"/>
			</list>
		</property>
	</bean>
	
	<!-- 调度触发器 -->
	<!-- printHelloTrigger配置 -->
	<bean id="printHelloTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="printHelloDetail"/>
		<property name="cronExpression" value="0/5 * * * * ?"/>
	</bean>
	
	<bean id="printHelloDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="printHelloJob"/>
		<property name="targetMethod" value="execute"/>
	</bean>
	
	<bean id="printHelloJob" class="com.dhm.schedule.job.PrintHelloJob">
		<property name="targetType" value="PRINT_HELLO" />
		<property name="targetId" value="PRINT_HELLO_JOB" />
		<property name="lockMins" value="10" />
	</bean>
	
	<!-- printHelloTrigger1配置 -->
	<bean id="printHelloTrigger1" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="printHelloDetail1"/>
		<property name="cronExpression" value="0/5 * * * * ?"/>
	</bean>
	
	<bean id="printHelloDetail1" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="printHelloJob1"/>
		<property name="targetMethod" value="execute"/>
	</bean>
	
	<bean id="printHelloJob1" class="com.dhm.schedule.job.PrintHelloJob1">
		<property name="targetType" value="PRINT_HELLO1" />
		<property name="targetId" value="PRINT_HELLO_JOB1" />
	</bean>
</beans>